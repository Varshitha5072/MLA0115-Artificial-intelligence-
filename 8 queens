def is_valid(board, row, col):
    # Check this column on the board
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def solve_n_queens(n):
    def solve(row, board):
        if row == n:
            solutions.append(board[:])
            return
        
        for col in range(n):
            if is_valid(board, row, col):
                board[row] = col
                solve(row + 1, board)
                board[row] = -1

    solutions = []
    board = [-1] * n
    solve(0, board)
    return solutions

def print_solutions(solutions):
    for sol in solutions:
        for row in sol:
            print(' '.join('Q' if i == row else '.' for i in range(len(sol))))
            print()
        print('-----')

# Example usage
n = 8
solutions = solve_n_queens(n)
print(f"Number of solutions: {len(solutions)}")
print_solutions(solutions)
